const { app, BrowserWindow, ipcMain } = require('electron');
const path = require('path');
const fs = require('fs').promises;

let mainWindow;

function createWindow() {
  console.log('üñ•Ô∏è [MAIN] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á window...');
  
  mainWindow = new BrowserWindow({
    width: 1000,
    height: 700,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: path.join(__dirname, 'preload.js')
    }
  });

  mainWindow.loadFile('index.html');
  mainWindow.webContents.openDevTools();
  console.log('‚úÖ [MAIN] ‡∏™‡∏£‡πâ‡∏≤‡∏á window ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
}

app.whenReady().then(() => {
  console.log('‚ö° [MAIN] Electron ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
  createWindow();
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') app.quit();
});

// ===== IPC HANDLERS =====

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
ipcMain.handle('send-message', (event, message) => {
  console.log('üì® [MAIN] ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:', message);
  return {
    original: message,
    reply: `Server ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: "${message}"`,
    timestamp: new Date().toISOString(),
    status: 'success'
  };
});

// ‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
ipcMain.handle('say-hello', (event, name) => {
  console.log('üëã [MAIN] ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏Å‡∏±‡∏ö:', name);
  const greetings = [
    `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${name}! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Agent Wallboard`,
    `‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ ${name}! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á?`,
    `Hello ${name}! ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ô‡∏∞`,
  ];
  const randomGreeting = greetings[Math.floor(Math.random() * greetings.length)];
  return {
    greeting: randomGreeting,
    name: name,
    time: new Date().toLocaleString('th-TH'),
    agentCount: 3
  };
});

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agents
ipcMain.handle('get-agents', async () => {
  console.log('üìä [MAIN] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agents...');
  try {
    const data = await fs.readFile('agent-data.json', 'utf8');
    return { success: true, data: JSON.parse(data), timestamp: new Date().toISOString() };
  } catch (error) {
    console.error('‚ùå [MAIN] Error ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
    return { success: false, error: error.message };
  }
});

// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ agent
ipcMain.handle('change-agent-status', async (event, { agentId, newStatus }) => {
  console.log(`üîÑ [MAIN] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ agent ${agentId} ‡πÄ‡∏õ‡πá‡∏ô ${newStatus}`);
  try {
    const data = await fs.readFile('agent-data.json', 'utf8');
    const agentData = JSON.parse(data);
    const agent = agentData.agents.find(a => a.id === agentId);
    if (!agent) throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö agent ID: ${agentId}`);
    agent.status = newStatus;
    agent.lastStatusChange = new Date().toISOString();
    await fs.writeFile('agent-data.json', JSON.stringify(agentData, null, 2));
    return { success: true, agent, message: `‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô ${newStatus} ‡πÅ‡∏•‡πâ‡∏ß` };
  } catch (error) {
    console.error('‚ùå [MAIN] Error ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:', error);
    return { success: false, error: error.message };
  }
});
